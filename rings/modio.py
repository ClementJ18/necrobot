import discord
from discord.ext import commands
from rings.utils.utils import react_menu

from typing import Union
import async_modio
import asyncio
from collections import defaultdict

class Modio:
    """Cog to keeps all the commands to interact with the mod.io API"""
    def __init__(self, bot):
        self.bot = bot

    @commands.group()
    async def modio(self, ctx):
        """Base of the modio command line, used to invoke various subcommands. If this is the first
        time you use any of the commands on this server you must first set a game using the `modio game`
        command.

        {usage}
        """
        pass

    @modio.command()
    async def game(self, ctx, *, value : Union[int, str] = None):
        """Used to get a game by either id or name or set a game as the game you want to be looking
        for mods on this server. Setting a game is important since modio requires a game id in order to
        look for mod.

        {usage}

        __Examples__
        `{pre}modio game 23` - get game with the id 23 and give you the option to set it as your game for this server
        `{pre}modio game Lord of the Rings` - get the first game that matches 'Lord of the Rings'
        `{pre}modio game` - get a list of games available on mod.io
        """
        if value is None:
            games = (await self.bot.modio.get_games()).results

            def embed_maker(index):
                description = "\n".join([f"- {game.name} ({game.id})" for game in games[index*15:(index+1)*15]])
                embed = discord.Embed(title=f"Games on mod.io", url="https://mod.io/", description=description)
                embed.set_footer(text="Generated by Necrobot", icon_url=self.bot.user.avatar_url_as(format="png", size=128))

                return embed

            return await react_menu(ctx, len(games)//15, embed_maker)

        if isinstance(value, str):
            fltr = async_modio.Filter().text(value)
            game = (await self.bot.modio.get_games(filter=fltr)).results
            if not game:
                return await ctx.send(":negative_squared_cross_mark: | Couldn't find that game")

            game = game[0]
        else:
            game = await self.bot.modio.get_game(value)

        embed = discord.Embed(title=game.name, colour=discord.Colour(0x277b0), url=game.profile, description=game.summary)
        embed.set_author(name=game.submitter.username, url=game.submitter.profile, icon_url=game.submitter.avatar.original)
        embed.set_footer(text="Generated by Necrobot", icon_url=self.bot.user.avatar_url_as(format="png", size=128))

        embed.add_field(name="Options", value=f'''
            - Presentation: {game.presentation.name}
            - Submission: {game.submission.name}
            - Curation: {game.curation.name}
            - Community: {game.community.name}
            - API Access: {game.api}
            - Revenu: {game.revenue.name}
            - Maturity: {game.maturity_options}
        ''')

        embed.add_field(name="Dates", value=f'''
            - Published: {game.date.strftime("%d-%m-%Y %H:%M:%S")}
            - Updated: {game.updated.strftime("%d-%m-%Y %H:%M:%S")}
            - Live: {game.live.strftime("%d-%m-%Y %H:%M:%S")}
        ''')

        embed.add_field(name="Additional Info", value=f'''
            - ID: {game.id}
            - URL: {game.profile}
            - Homepage: {game.homepage}
        ''')

        embed.set_image(url=game.logo.original)

        msg = await ctx.send("Set this game as the game to look for mods in?", embed=embed)
        await msg.add_reaction("\N{WHITE HEAVY CHECK MARK}")
        await msg.add_reaction("\N{NEGATIVE SQUARED CROSS MARK}")

        def check(reaction, user):
            return user == ctx.author and str(reaction.emoji) in ["\N{WHITE HEAVY CHECK MARK}", "\N{NEGATIVE SQUARED CROSS MARK}"] and msg.id == reaction.message.id

        try:
            reaction, _ = await self.bot.wait_for("reaction_add", check=check, timeout=300)
        except asyncio.TimeoutError:
            return await msg.clear_reactions()

        if reaction.emoji == "\N{WHITE HEAVY CHECK MARK}":
            self.bot.games[ctx.author.id][ctx.guild.id] = game
            await self.bot.query_executer("""INSERT INTO necrobot.Modio VALUES ($1, $2, $3) ON CONFLICT ON CONSTRAINT 
                modio_pkey DO UPDATE SET game_id=$3""", ctx.author.id, ctx.guild.id, game.id)
            await ctx.send(":white_check_mark: | This game will be used when looking for a mod")

        return await msg.clear_reactions()

    @modio.command()
    async def mod(self, ctx, *, value : Union[int, str] = None):
        """Used to obtain a mod from the game you set previously on that server. It is important to set
        a game before using this command, see the help for `modio game`

        {usage}

        __Example__
        `{pre}modio mod` - see all the mods this game has
        `{pre}modio mod 24` - see mod with the id 24 for the game has
        `{pre}modio mod Lord of the Ring` - see the first result for a mod with a name matching 'Lord of the Ring'
        """
        if ctx.guild.id not in self.bot.games[ctx.author.id]:
            return await ctx.send(":negative_squared_cross_mark: | Please set a game for this server using n!modio game first.")

        game = self.bot.games[ctx.author.id][ctx.guild.id]
        if isinstance(game, int):
            game = await self.bot.modio.get_game(game)
            self.bot.games[ctx.author.id][ctx.guild.id] = game
        
        if value is None:
            mods = (await game.get_mods()).results

            def embed_maker(index):
                description = "\n".join([f"- {mod.name} ({mod.id})" for mod in mods[index*15:(index+1)*15]])
                embed = discord.Embed(title=f"{game.name} Mods", url=game.profile, description=description)
                embed.set_footer(text="Generated by Necrobot", icon_url=self.bot.user.avatar_url_as(format="png", size=128))

                return embed

            return await react_menu(ctx, len(mods)//15, embed_maker)

        if isinstance(value, str):
            fltr = async_modio.Filter().text(value)
            mod = (await game.get_mods(filter=fltr)).results
            if not mod:
                return await ctx.send(":negative_squared_cross_mark: | Couldn't find that mod")

            mod = mod[0]
        else:
            mod = await game.get_mod(value)   

        embed = discord.Embed(title=mod.name, colour=discord.Colour(0x277b0), url=mod.profile, description=mod.summary)
        embed.set_author(name=mod.submitter.username, url=mod.submitter.profile, icon_url=mod.submitter.avatar.original)
        embed.set_footer(text="Generated by Necrobot", icon_url=self.bot.user.avatar_url_as(format="png", size=128))
        embed.set_author(name=mod.submitter.username, url=mod.submitter.profile, icon_url=mod.submitter.avatar.original)
        embed.set_thumbnail(url=mod.logo.original)
        embed.add_field(name="Rating", value=f'''
            - Rank: {mod.stats.rank}/{mod.stats.rank_total}
            - Downloads: {mod.stats.downloads}
            - Subscribers: {mod.stats.subscribers}
            - :thumbsup: {mod.stats.positive} / :thumbdown: {mod.stats.negative}: {mod.stats.text}%
            - {mod.stats.text} 
        ''')

        files = await mod.get_files(filter=async_modio.Filter().limit(5).sort("id", reverse=True))
        files = [f"[{file.filename} v{file.version}]({file.url}) {'<:online:509069615494725643>' if not file.virus else '<:dnd:509069576160542757>'}" for file in files.results]
        embed.add_field(name="Download", value="\n".join(files))
        embed.add_field(name="Options", value=f'''
            - Maturity: {mod.maturity.name}
            - Status: {mod.status.name}
            - Visibility: {mod.visible.name}
        ''')

        embed.add_field(name="Dates", value=f'''
            - Published: {mod.date.strftime("%d-%m-%Y %H:%M:%S")}
            - Updated: {mod.updated.strftime("%d-%m-%Y %H:%M:%S")}
            - Live: {mod.live.strftime("%d-%m-%Y %H:%M:%S")}
        ''')

        embed.add_field(name="Additional Info", value=f'''
            - ID: {mod.id}
            - URL: {mod.profile}
            - Homepage: {mod.homepage}
        ''')

        embed.add_field(name="\u200b", value=" ".join([f'#{tag}' for tag in mod.tags.keys()]))

        await ctx.send(embed=embed)

def setup(bot):
    bot.add_cog(Modio(bot))