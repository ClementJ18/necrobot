#!/usr/bin/python3.6
import discord
from discord.ext import commands
from discord.ext.commands.cooldowns import BucketType

from rings.botdata.data import Data
import time
import calendar as c
import datetime as d

userData = Data.userData
serverData = Data.serverData

class Profile():
    def __init__(self, bot):
        self.bot = bot

    @commands.command(pass_context = True)
    @commands.cooldown(3, 10, BucketType.user)
    async def balance(self, cont, *user : discord.Member):
        """Prints the given user's NecroBot balance, if no user is supplied then it will print your own NecroBot balance."""
        if user:
            user = user[0]
            await self.bot.say(":atm: | **"+ str(user.name) +"** has **"+ str(userData[user.id]["money"]) +"** :euro:")
        else:
            await self.bot.say(":atm: | **"+ str(cont.message.author.name) +"** you have **"+ str(userData[cont.message.author.id]["money"])+"** :euro:")

    @commands.command(pass_context = True)
    @commands.cooldown(1, 5, BucketType.user)
    async def claim(self, cont):
        """Adds your daily 200 :euro: to your NecroBot balance. This can be used at anytime once every GMT day."""
        aDay = str(d.datetime.today().date())
        if aDay != userData[cont.message.author.id]["daily"]:
            await self.bot.say(":m: | You have received your daily **200** :euro:")
            userData[cont.message.author.id]["money"] += 200
            userData[cont.message.author.id]["daily"] = aDay
        else:
            await self.bot.say(":negative_squared_cross_mark: | You have already claimed your daily today, come back tomorrow.")

    @commands.command(pass_context = True)
    @commands.cooldown(3, 5, BucketType.user)
    async def info(self, cont, *user : discord.Member):
        """Returns a rich embed of the given user's info. If no user is provided it will return your own info."""
        if user:
            user = user[0]
        else:
            user = cont.message.author

        serverID = cont.message.server.id
        embed = discord.Embed(title="__**" + user.display_name + "**__", colour=discord.Colour(0x277b0), description="**Title**: " + userData[user.id]["title"])
        embed.set_thumbnail(url=user.avatar_url.replace("webp","jpg"))
        embed.set_footer(text="Generated by NecroBot", icon_url="https://cdn.discordapp.com/avatars/317619283377258497/a491c1fb5395e699148fcfed2ee755cf.jpg?size=128")

        embed.add_field(name="**Date Created**", value=user.created_at.strftime("%d - %B - %Y %H:%M"))
        embed.add_field(name="**Date Joined**", value=user.joined_at.strftime("%d - %B - %Y %H:%M"), inline=True)

        embed.add_field(name="**User Name**", value=user.name + "#" + user.discriminator)
        embed.add_field(name="**Top Role**", value=user.top_role.name, inline=True)

        embed.add_field(name="**NecroBot Data**", value="__Permission Level__ - " + permsName[userData[user.id]["perms"][serverID]] + "   \n__Balance__ - " + str(userData[user.id]["money"]) + " :euro:   \n__Experience__  - " + str(userData[user.id]["exp"]))
        embed.add_field(name="Warning List", value=userData[user.id]["warnings"])

        await self.bot.say(embed=embed)

    @commands.command(pass_context = True)
    @commands.cooldown(3, 5, BucketType.user)
    async def settitle(self, cont, *, text : str = ""):
        """Sets your NecroBot title to [text]. If no text is provided it will reset it. Limited to max 20 characters."""
        if text == "":
            await self.bot.say(":white_check_mark: | Your title has been reset")
        elif len(text) <= 20:
            await self.bot.say(":white_check_mark: | Great your title is now **" + text + "**")
        else:
            await self.bot.say(":negative_squared_cross_mark: | You have gone over the 20 character limit, your title wasn't set.")
            return

        userData[cont.message.author.id]["title"] = text

def setup(bot):
    bot.add_cog(Profile(bot))