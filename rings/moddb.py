import discord
from discord.ext import commands

from bs4 import BeautifulSoup
import aiohttp

class ModDB():
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def moddb(self, url):
        if cont.message.content[7:].startswith("http://www.moddb.com/mods/"):
            #obtain xml and html pages
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    soup = BeautifulSoup(await resp.text(), "html.parser")

                async with session.get(url.replace("www","rss")+ "/articles/feed/rss.xml") as resp:
                    rss = BeautifulSoup(await resp.text(), "xml")

            modName = str(soup.title.string[:len(soup.title.string)-9])

            try:
                modDesc = str(soup.find(itemprop="description")["content"])
            except KeyError:
                modDesc = str(soup.find(itemprop="description").string)

            embed = discord.Embed(title="__**" + modName + "**__", colour=discord.Colour(0x277b0), url=url, description=modDesc)
            embed.set_author(name="ModDB", url="http://www.moddb.com", icon_url="http://i.imgur.com/aExydLm.png")
            embed.set_footer(text="Generated by NecroBot", icon_url="https://cdn.discordapp.com/avatars/317619283377258497/a491c1fb5395e699148fcfed2ee755cf.jpg?size=128")
            
            #navbar
            sections = ["Articles","Reviews","Downloads","Videos","Images"]
            navBar = list()
            for x in sections:
                navBar.append("["+ str(x) +"]("+url+"/"+str(x)+")")

            embed.add_field(name="Navigation", value=" - ".join(navBar))

            #recent articles
            articles = rss.find_all("item")[:3]
            for article in articles:
                title = str(article.title.string)
                desc = str(article.find_all(type="plain")[1].string)
                link = str(article.link.string)
                date = str(article.pubDate.string[:len(article.pubDate.string)-14])
                embed.add_field(name=title, value=desc + "... [Link](" + link + ")\n" + "Published "+ date)

            #tags
            tags = soup.find(id="tagsform")
            tagList = list()
            for x in tags.descendants:
                if str(type(x)) == "<class 'bs4.element.NavigableString'>":
                    if len(x) > 0 and x != "\n" and x != " ":
                        tagList.append(str(x))

            embed.add_field(name="Tags", value="#" + " #".join(tagList[:len(tagList)-1]))

            #misc stuff
            misc = soup.find_all("h5")
            try:
                follow = ["[Follow the mod](" + x.parent.a["href"] + ")" for x in misc if x.string == "Mod watch"][0]
            except IndexError:
                follow = "Cannot follow"
            try: 
                publishers = "Creator: " + [x.parent.a.string for x in misc if x.string in ["Developer", "Creator"]][0]
            except IndexError:
                follow = "No Creator"

            #comment
            comment = "[Leave a comment](" + url + "#commentform)"

            #release date
            release_date = "Release: " + str(soup.time.string)

            #rating
            try:
                score = str("Average Rating: " + soup.find(itemprop="ratingValue")["content"])
            except TypeError:
                score = "Average Rating: Not rated"
            
            embed.add_field(name="Misc: ", value=score + " \n" + publishers + "  -  " + release_date + "\n**" + comment + "**  -  **" + follow + "**")

            #style
            try:
                genre = "**Genre**: " + [x.parent.a.string for x in misc if x.string == "Genre"][0]
            except IndexError:
                genre = "**Genre**: None"
            try:
                theme = "**Theme**: " + [x.parent.a.string for x in misc if x.string == "Theme"][0]
            except IndexError:
                theme = "**Theme**: None"
            try:
                players = "**Players**: " + [x.parent.a.string for x in misc if x.string == "Players"][0]
            except IndexError:
                players = "**Players**: None"

            embed.add_field(name="Style", value= genre + "\n" + theme + "\n" + players, inline=True)

            #stats
            try:
                rank = "__Rank__: " + [x.parent.a.string for x in misc if x.string == "Rank"][0]
            except IndexError:
                rank = "__Rank__: Unclassed"
            try:
                visits = "__Visits__: " + [x.parent.a.string for x in misc if x.string == "Visits"][0]
            except IndexError:
                visits = "__Visits__: Not tracked"
            try:
                last_update = "__Last Update__: " + [x.parent.time.string for x in misc if x.string == "Last Update"][0]
            except IndexError:
                last_update = "__Last Update__: None"
            try:
                files = "__Files__: " + [x.parent.a.string for x in misc if x.string == "Files"][0]
            except IndexError:
                files = "__Files__: 0"
            try:
                articles_posted = "__Articles__: " + [x.parent.a.string for x in misc if x.string == "Articles"][0]
            except IndexError:
                articles_posted = "__Articles__: 0"
            try:
                reviews = "__Reviews__: " + [x.parent.a.string for x in misc if x.string == "Reviews"][0]
            except IndexError:
                reviews = "__Reviews__: 0"

            embed.add_field(name="Stats", value=rank + "\n" + visits + "\n" + last_update + "\n" + files + "\n" + articles_posted + "\n" + reviews)

            #you may also like
            suggestionList = list()
            suggestions = soup.find(string="You may also like").parent.parent.parent.parent.find_all(class_="row clear")
            for x in suggestions:
                link = x.find("a",class_="heading")
                suggestionList.append("[" + link.string + "](" + link["href"] + ")")

            embed.add_field(name="You may also like",value=" - ".join(suggestionList))

            await self.bot.say(embed=embed)
            await self.bot.delete_message(cont.message)

        else:
            await self.bot.say("URL was not valid, try again with a valid url. URL must be from an existing mod page. Accepted examples: `http://www.moddb.com/mods/edain-mod`, `http://www.moddb.com/mods/rotwk-hd-edition`, ect...")

def setup(bot):
    bot.add_cog(ModDB(bot))