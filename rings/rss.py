import discord
from discord.ext import commands

from rings.utils.utils import react_menu, has_perms

import feedparser
import asyncio
import datetime

class RSS():
    """Cog for keeping up to date with a bunch of different stuff automatically."""

    def __init__(self, bot):
        self.bot = bot
        self.base_youtube = "https://www.youtube.com/feeds/videos.xml?channel_id={}"
        self.task = self.bot.loop.create_task(self.rss_task())

    def __unload(self):
        self.task.cancel()

    @commands.group(invoke_without_command = True, aliases=["yt"])
    @has_perms(3)
    async def youtube(self, ctx, youtuber_id : str = None, channel : discord.TextChannel = None):
        """Add/remove/edit a youtube stream. As long as you provide a channel, the stream will be set to that
        channel, if you don't provide a channel, the stream will be removed. To get the channel ID follow the steps:

        1. Go to the YouTube channel you want to track
        2. View the page’s source code
        3. Look for the following text: externalId
        4. Get the value right after externalID (it’ll look something like UCBcRF18a7Qf58cCRy5xuWwQ)

        It is also possible that the id of the channel is located at the end of the url, a simple check can confirm it, 
        if the endof the url (after the last /) is exactly or similar to the name of the channel then it isn't the id, if it 
        is more or less a random jumble of letters and numbers like the example in step 4 then it is most likely the id. 
        The bot will tell you if it couldn't find a channel to match the id given and will send you a sample video so you 
        can double check it is the correct channel.

        If you call the command without any arguments it will show you a list of youtube channels you are 
        subbed to and where the new videos are sent to.

        This command is locked to Semi-Admins (Level 3)

        {usage}

        __Example__
        `{pre}youtube UCBcRF18a7Qf58cCRy5xuWwQ #streams` - subscribe to the youtube channel with this id and send all 
        new videos to the #streams
        `{pre}youtube` - list all yuotube channels you are subbed to and which discord channel they are being sent to.
        `{pre}youtube UCBcRF18a7Qf58cCRy5xuWwQ` - delete your subscription to this channel
        """
        if youtuber_id is None:
            feeds = await self.bot.query_executer("SELECT * FROM necrobot.Youtube WHERE guild_id=$1", ctx.guild.id)

            def embed_generator(page):
                to_string = [f"[{result[2]}](https://www.youtube.com/channel/{result[2]}): {ctx.guild.get_channel(result[1]).mention} - `{result[4] if result[4] != '' else 'None'}`" for result in feeds[page*15:(page+1)*15]]
                embed = discord.Embed(title="Subscriptions", description = "\n".join(to_string))
                embed.set_footer(text="Generated by Necrobot", icon_url=self.bot.user.avatar_url_as(format="png", size=128))

                return embed

            return await react_menu(ctx, len(feeds)//15, embed_generator)

        if channel is None:
            await self.bot.query_executer("DELETE FROM necrobot.Youtube WHERE guild_id = $1 AND youtuber_id = $2", ctx.guild.id, youtuber_id)
            
            return await ctx.send("You are no longer subscribed to this youtube channel")

        async with self.bot.session.get(self.base_youtube.format(youtuber_id)) as resp:
            if resp.status != 200:
                return await ctx.send(":negative_squared_cross_mark: | This channel does not exist, double check the youtuber id.")
            
            feed = feedparser.parse(await resp.text())

        embed = discord.Embed(
            title=feed["feed"]["title"], 
            description=f"Number of videos: **{len(feed['entries'])}**", 
            url=feed["feed"] ["link"]
        )
        embed.set_footer(text="Generated by Necrobot", icon_url=self.bot.user.avatar_url_as(format="png", size=128))
        
        await self.bot.query_executer(
            """INSERT INTO necrobot.Youtube AS yt VALUES ($1, $2, $3, NOW(), '') 
            ON CONFLICT (guild_id,youtuber_id) 
            DO UPDATE SET channel_id = $2 WHERE yt.guild_id = $1 AND yt.youtuber_id = $3""",
            ctx.guild.id, channel.id, youtuber_id
        )

        await ctx.send(f":white_check_mark: | New videos from this channel will now be posted in {channel.mention}. Here's the channel you have subbed to:", embed=embed)

    @youtube.command(name="filters")
    @has_perms(3)
    async def youtube_filters(self, ctx, youtuber_id : str, *, filters : str = ""):
        """This subcommand allows you to set a filter so that only videos which posses these keywords will be posted.
        The filter itself is very rudimentary but will work so that any video that has exactly these words (in
        any case) in that order in the title will be posted. You can clear filters by calling this command with just
        a youtuber id. Filters are limited to 200 characters

        {usage}

        __Examples__
        `{pre}youtube filters UCBcRF18a7Qf58cCRy5xuWwQ edain` - only post videos containing the word `edain`in their title
        `{pre}youtube filters UCBcRF18a7Qf58cCRy5xuWwQ - clear all filters for that channel, posting every video
        """
        filters = filters[:200]
        await self.bot.query_executer("UPDATE necrobot.Youtube SET filter = $3 WHERE guild_id = $1 and youtuber_id = $2", ctx.guild.id, youtuber_id, filters.lower())
        if filters == "":
            await ctx.send(":white_check_mark: | Filters have been disabled for this channel")
        else:
            await ctx.send(f":white_check_mark: | Only videos with the words: **{filters}** will be posted for this yt channel")

    async def youtube_sub_task(self):
        feeds = await self.bot.query_executer("SELECT * FROM necrobot.Youtube")
        for feed in feeds:
            await self.bot.query_executer("UPDATE necrobot.Youtube SET last_update = NOW() WHERE guild_id = $1 AND youtuber_id = $2", feed[0], feed[2])
            async with self.bot.session.get(self.base_youtube.format(feed[2])) as resp:
                parsed_feed = feedparser.parse(await resp.text())["entries"]
                parsed_feed.reverse()

            for entry in parsed_feed:
                published = datetime.datetime.strptime(entry["published"][:-3] + entry["published"][-2:], '%Y-%m-%dT%H:%M:%S%z')
                if published >= feed[3] and feed[4] in entry["title"].lower():
                    embed = discord.Embed(title=entry["title"], description=entry["summary"][:2000], url=entry["link"])
                    embed.set_author(name=entry["author_detail"]["name"], url=entry["author_detail"]["href"])
                    embed.set_thumbnail(url=entry["media_thumbnail"][0]["url"])
                    embed.set_footer(text="Generated by Necrobot", icon_url=self.bot.user.avatar_url_as(format="png", size=128))

                    await self.bot.get_guild(feed[0]).get_channel(feed[1]).send(embed=embed)

    async def rss_task(self):
        await self.bot.wait_until_ready()
        while not self.bot.is_closed():
            try:
                await asyncio.sleep(900)
                await self.youtube_sub_task()
            except asyncio.CancelledError:
                return
            except Exception as e:
                await self.bot.dispatch("error", f'rss_task: {e}')

def setup(bot):
    bot.add_cog(RSS(bot))
