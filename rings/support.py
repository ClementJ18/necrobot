#!/usr/bin/python3.6
import discord
from discord.ext import commands

from rings.utils.utils import has_perms, react_menu
from rings.utils.var import tutorial_e

import ast
import time
from datetime import timedelta


class Support():
    """All the NecroBot support commands are here to help you enjoy your time with NecroBot """
    def __init__(self, bot):
        self.bot = bot
        self.bot.tutorial_e = discord.Embed.from_data(tutorial_e)

        gdpr_e = {'footer': {
                    'text': 'Generated by NecroBot', 'icon_url': 'https://cdn.discordapp.com/avatars/317619283377258497/a491c1fb5395e699148fcfed2ee755cf.jpg?size=128'}, 
                    'fields': [
                        {'inline': True, 'name': 'Your Data', 'value': "From your personal data, and without ever using any command, the bot only stores your user ID which is technically discord's data but just as an FYI. Apart from that the bot will never store any sort of data that you don't give it through the use of command. So as long as you don't use any command the bot will only have access to your user id."}, 
                        {'inline': True, 'name': 'Your Messages', 'value': "Commands you use will be logged into the bot purely for debugging and information purposes. These logs contain your user id and where you used the command in addition to the message itself and the time the command was used. If you do not wish for the bot to log these messages do not use commands. The bot can also, at the discretion of the server admins, send copies of any message you edit or delete as part of the automoderation aspect. These messages are not stored in the bot, they are merely forwarded to another channel chosen by the server authorities. If you do not wish for your deleted/edited messages to be logged you will have to take it up with the server authorities. By inviting the bot and using the command they give consent for all users present on the server to have their messages logged and by joining the server you give consent to obey its rules."}, 
                        {'inline': True, 'name': 'Your Server', 'value': "The bot will generate a profile based on the server ID upon being invited to your server, in addition, as part of the automoderation initiative it will track and store the invites created by the server to help you track which invites user use when joining your server. If you do not wish for this to take place you must simply make sure you keep automoderation disabled. All other data the bot collects about your server will have to be given to it willingly through the use of commands."},
                        {'inline': True, 'name': 'Conclusion', 'value': "The bottom line is, if you don't want the bot to log any of your data then you have to avoid using bot commands or being in a server which uses the bot's automoderation features. I can, at your request delete your user data but that user data will be instantly regenerated if you ever come in contact with the bot."}], 
                    'color': 161712, 'type': 'rich', 
                'description': "This is information pertaining to you and the data the bot stores about you. I'm no lawyer so this is probably a shit legal explaination but I'm trying. I'm doing this bot as a hobby and am not getting any sort of financial compensation for it, this post is of informal nature rather than legal nature. Your data is split up in three categories: \n- **Your personal data** (which the bot does not store) \n- **Your Discord Data**: the data generated by discord for you to be able to use the service \n- **Your Bot Data**: the data generated by the bot for you to be able to use the bot. \nAs far as I'm aware GDPR only covers the first one unless you specifically requesting for an account termination, but read on nonethless.", 
                    'title': 'Your Data and the Bot '
                    }
        self.bot.gdpr_embed = discord.Embed.from_data(gdpr_e)
        
    @commands.command(aliases=["support"])
    async def about(self, ctx):
        """Creates a rich embed of the bot's details Also contains link for inviting and support server.

        {usage}"""

        bot_desc = "Hello! :wave: I'm NecroBot, a moderation bot with many commands for a wide variety of server and a high modularity which means you can enable/disable just about every part of me as you wish."
        embed = discord.Embed(title="__**NecroBot**__", colour=discord.Colour(0x277b0), description=bot_desc)
        embed.set_footer(text="Generated by Necrobot", icon_url=self.bot.user.avatar_url_as(format="png", size=128))
        embed.add_field(name="Version", value=self.bot.version)
        embed.add_field(name="About", value=f"I'm currently in {len(list(self.bot.guilds))} guilds and I can see {len(list(self.bot.users))} members. I was created using Python and the d.py library. ")
        uptime = str(timedelta(seconds=time.time() - self.bot.uptime_start)).partition(".")[0].replace(":", "{}")
        embed.add_field(name="Uptime", value=uptime.format("hours, ", "minutes and ") + "seconds")
        embed.add_field(name="Links", value=f"[Invite bot to your server]({discord.utils.oauth_url(self.bot.user.id, discord.Permissions(permissions=403172599))}) - [Get help with the bot](https://discord.gg/Ape8bZt)", inline=False)
        await ctx.send(embed=embed)

    @commands.command()
    async def report(self, ctx, *, message):
        """Report a bug with the bot or send a suggestion . Please be a specific as you can. Any abusive use will result in
        blacklisting.

        {usage}

        __Examples__
        `{pre}report profile while using profile the picture came out wrong, it was all distorted and stuff and my data on it was wrong.` - report 
        a bug for `profile`
        `{pre}report settings while using the sub-command mute it told me there was no such role when there is indeed` - report a bug for 
        `settings`"""

        embed = discord.Embed(title=":bulb: A report has just came in :bulb:", description=message, colour=discord.Colour(0x277b0))
        embed.set_footer(text="Generated by Necrobot", icon_url=self.bot.user.avatar_url_as(format="png", size=128))
        embed.set_author(name=ctx.author.name, icon_url=ctx.author.avatar_url)
        embed.add_field(name="Helpful Info", value=f"User: {ctx.author.mention} \nServer: {ctx.guild.name} \nServer ID: {ctx.guild.id}")
        await self.bot.get_channel(398894681901236236).send(embed=embed)
        await ctx.send(":white_check_mark: | Report sent!")

    @commands.group(invoke_without_command=True)
    async def news(self, ctx, index : int = 1):
        """See the latest necrobot news

        {usage}

        __Examples__
        `{pre}news` - get the news starting from the latest
        `{pre}news 4` - get the news starting from the fourth item
        `{pre}news 1` - get the news starting from the first item"""
        news = self.bot.settings["news"]

        if not news:
            await ctx.send(":negative_squared_cross_mark: | No news available")
            return

        if 0 >= index > len(news):
            await ctx.send(f":negative_squared_cross_mark: | Not a valid index, pick a number from 1 to {len(news)}")
            return
        
        def _embed_generator(page):
            return discord.Embed.from_data(news[page])

        await react_menu(ctx, len(news) - 1, _embed_generator, index-1)

    @news.command("add")
    @has_perms(6)
    async def news_add(self, ctx, *, news : str):
        """Add a new news item

        {usage}"""
        try:
            news = ast.literal_eval(news)
        except ValueError as e:
            await ctx.send(str(e))
            return

        base_d = {
            "author": {
                "name": "Necrobot's Anchorman", "url": "https://discord.gg/Ape8bZt", 
                "icon_url": self.bot.user.avatar_url_as(format="png", size=128)
            }, 
            "color": 161712, "type": "rich"
        }
        news_e = {**news , **base_d}
        embed = discord.Embed.from_data(news_e)
        msg = await ctx.send(embed=embed)
        await msg.add_reaction("\N{WHITE HEAVY CHECK MARK}")
        await msg.add_reaction("\N{NEGATIVE SQUARED CROSS MARK}")

        def check(reaction, user):
            return user == ctx.author and reaction.emoji in ["\N{NEGATIVE SQUARED CROSS MARK}", "\N{WHITE HEAVY CHECK MARK}"] and msg.id == reaction.message.id

        reaction, _ = await self.bot.wait_for("reaction_add", check=check)

        if reaction.emoji == "\N{WHITE HEAVY CHECK MARK}":
            self.bot.settings["news"] = [news, *self.bot.settings["news"]]
            await ctx.send(f":white_check_mark: | Added **{news['title']}** news")
            channel = self.bot.get_channel(436595183010709514)
            await channel.send(embed=embed)

        await msg.clear_reactions()


    @news.command("delete")
    @has_perms(6)
    async def news_delete(self, ctx, index : int):
        """Remove a news item

        {usage}"""
        if not self.bot.settings["news"]:
            await ctx.send(":negative_squared_cross_mark: | No news available")
            return

        if not 0 <= index < len(self.bot.settings["news"]):
            await ctx.send(f":negative_squared_cross_mark: | Not a valid index, pick a number between 1 and {len(self.bot.settings['news'])}")
            return

        news = self.bot.settings["news"].pop(index)
        await ctx.send(f":white_check_mark: | News **{news['title']}** removed")

    @news.command("raw")
    @has_perms(6)
    async def news_raw(self, ctx, index : int):
        """Get the raw dict form of the news

        {usage}"""
        await ctx.send(self.bot.settings["news"][index])

    @news.command("template")
    @has_perms(6)
    async def news_template(self, ctx):
        """Prints the template for news

        {usage}"""
        await ctx.send('{ "fields": [{"inline": False, "name": "Why is good 1", "value": "Because"}], "description": "", "title": ""}')

    @commands.command()
    async def tutorial(self, ctx):
        """Sends an embed with helpful information on Necrobot's features, be warned, it is quite a dense text blob

        {usage}"""
        try:
            await ctx.author.send(embed=self.bot.tutorial_e)
        except discord.errors.Forbidden:
            await ctx.send(":negative_squared_cross_mark: | Looks like you have private messages disabled")

    @commands.command()
    async def gdpr(self, ctx):
        """Get information on the data necrobot keeps about you and what steps you can do about it.

        {usage}"""
        try:
            await ctx.send(embed=self.bot.gdpr_embed)
        except discord.Forbidden:
            await ctx.send(":negative_squared_cross_mark: | Looks like you have private messages disabled")

def setup(bot):
    bot.add_cog(Support(bot))
