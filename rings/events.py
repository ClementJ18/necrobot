#!/usr/bin/python3.6
import discord
from discord.ext import commands
import traceback
from datetime import timedelta
import time as t
import asyncio
import sys

class NecroEvents():
    def __init__(self, bot):
        self.bot = bot

    async def on_resumed(self):
        channel = self.bot.get_channel(318465643420712962)
        await channel.send("**Bot Resumed**")

    async def on_command_error(self, ctx, error):
        """Catches error and sends a message to the user that caused the error with a helpful message."""
        channel = ctx.message.channel
        try:
            if ctx.command.name in self.bot.server_data[ctx.message.guild.id]["disabled"] and ctx.prefix != "n@":
                await ctx.send(":negative_squared_cross_mark: | Command {} cannot be used on this server.".format(ctx.command.name), delete_after=10)
                await ctx.message.delete()
                return
        except AttributeError:
            pass

        if isinstance(error, commands.MissingRequiredArgument):
            await channel.send(":negative_squared_cross_mark: | Missing required argument: `{}`! Check help guide with `n!help {}`".format(error.param.name, ctx.command.qualified_name), delete_after=10)
            # index = list(ctx.command.clean_params.keys()).index(error.param.name)
            # missing = list(ctx.command.clean_params.values())[index:]
            # print("missing folloing: {}".format(", ".join([x.name for x in missing])))
        elif isinstance(error, commands.CheckFailure):
            await channel.send(":negative_squared_cross_mark: | You do not have the required NecroBot permissions to use this command.", delete_after=10)
        elif isinstance(error, commands.CommandOnCooldown):
            retry_after = str(timedelta(seconds=error.retry_after)).partition(".")[0].replace(":", "{}")
            await channel.send(":negative_squared_cross_mark: | This command is on cooldown, retry after **{}**".format(retry_after.format("hours, ", "minutes and ") + "seconds"), delete_after=10)
        elif isinstance(error, commands.NoPrivateMessage):
            await channel.send(":negative_squared_cross_mark: | This command cannot be used in private messages.", delete_after=10)
        elif isinstance(error, commands.DisabledCommand):
            await channel.send(":negative_squared_cross_mark: | This command is disabled and cannot be used for now.", delete_after=10)
        elif isinstance(error, commands.BadArgument):
            await channel.send(":negative_squared_cross_mark: | Following error with passed arguments: **{}**".format(error), delete_after=10)
        elif isinstance(error, discord.Forbidden):
            await channel.send(":negative_squared_cross_mark: | Something went wrong, check my permission level, it seems I'm not allowed to do that on your guild.", delete_after=10)
        elif isinstance(error, asyncio.TimeoutError):
            retry_after = str(timedelta(seconds=error.timer)).partition(".")[0].replace(":", "{}")
            await channel.send(":negative_squared_cross_mark: | You took too long to reply, please reply within {} next time".format(retry_after.format("hours, ", "minutes and ") + "seconds"), delete_after=10)
        elif isinstance(error, commands.CommandInvokeError):
            channel = self.bot.get_channel(415169176693506048)
            the_traceback = "```py\n" + " ".join(traceback.format_exception(type(error), error, error.__traceback__, chain=True)) + "\n```"
            embed = discord.Embed(title="Command Error", description=the_traceback, colour=discord.Colour(0x277b0))
            embed.set_footer(text="Generated by NecroBot", icon_url="https://cdn.discordapp.com/avatars/317619283377258497/a491c1fb5395e699148fcfed2ee755cf.jpg?size=128")
            embed.add_field(name="Command", value=ctx.command.name)
            embed.add_field(name="Author", value=ctx.author.mention)
            embed.add_field(name="Location", value="**Guild:** {0.name} ({0.id}) \n**Channel:** {1.name} ({1.id})".format(ctx.guild, ctx.channel))
            embed.add_field(name="Message", value=ctx.message.content, inline=False)
            try:
                await channel.send(embed=embed)
            except:
                print('Ignoring exception in command {}:'.format(ctx.command), file=sys.stderr)
                traceback.print_exception(type(error), error, error.__traceback__, file=sys.stderr)
            
            if ctx.guild.id != 311630847969198082:
                await ctx.send(":negative_squared_cross_mark: | Something unexpected went wrong, Necro's gonna get right to it. If you wish to know more on what went wrong you can join the support server: <https://discord.gg/Ape8bZt>")

    async def on_error(self, event, *args, **kwargs):
        channel = self.bot.get_channel(415169176693506048)
        the_traceback = "```py\n{}\n```".format(traceback.format_exc())
        embed = discord.Embed(title="Error", description=the_traceback, colour=discord.Colour(0x277b0))
        embed.add_field(name='Event', value=event)
        embed.set_footer(text="Generated by NecroBot", icon_url="https://cdn.discordapp.com/avatars/317619283377258497/a491c1fb5395e699148fcfed2ee755cf.jpg?size=128")
        try:
            await channel.send(embed=embed)
        except:
            print('Ignoring exception in {}'.format(event), file=sys.stderr)
            traceback.print_exc()

    async def on_guild_join(self, guild):
        if guild.id in self.bot.settings["blacklist"]:
            await guild.leave()
            return

        if guild.id not in self.bot.server_data:
            self.bot.server_data[guild.id] = self.bot._new_server()
            await self.bot.query_executer("INSERT INTO necrobot.Guilds VALUES($1, 0, 0, 0, 'Welcome {member} to {server}!', 'Leaving so soon? We''ll miss you, {member}!)', '', 0, '', 1, 0, 5, 0);", guild.id)

        for member in guild.members:
            await self.bot.default_stats(member, guild)

        await guild.owner.send(embed=self.bot.tutorial_e)

    async def on_message_delete(self, message):
        if isinstance(message.channel, discord.DMChannel) or self.bot.server_data[message.guild.id]["automod"] == "" or message.author.bot:
            return

        role_id = [role.id for role in message.author.roles]
        if message.author.id not in self.bot.server_data[message.guild.id]["ignore-automod"] and message.channel.id not in self.bot.server_data[message.guild.id]["ignore-automod"] and not any(x in role_id for x in self.bot.server_data[message.guild.id]["ignore-automod"]):
            if not message.content:
                message.content = "\U0000200b"

            embed = discord.Embed(title="Message Deleted", description=message.content, colour=discord.Colour(0x277b0))
            embed.set_author(name=message.author, icon_url= message.author.avatar_url)
            embed.set_footer(text="Generated by NecroBot", icon_url="https://cdn.discordapp.com/avatars/317619283377258497/a491c1fb5395e699148fcfed2ee755cf.jpg?size=128")
            embed.add_field(name="Info", value="In " + message.channel.mention + " by " + message.author.mention)
            embed.add_field(name="Attachment?", value="Yes" if message.attachments else "No", inline=False)
            channel = self.bot.get_channel(self.bot.server_data[message.guild.id]["automod"])
            await channel.send(embed=embed)

    async def on_message_edit(self, before, after):
        if isinstance(before.channel, discord.DMChannel) or self.bot.server_data[before.guild.id]["automod"] == "":
            return

        if before.author.bot or before.content == after.content:
            return

        role_id = [role.id for role in before.author.roles]
        if before.author.id not in self.bot.server_data[before.guild.id]["ignore-automod"] and before.channel.id not in self.bot.server_data[before.guild.id]["ignore-automod"] and not any(x in role_id for x in self.bot.server_data[before.guild.id]["ignore-automod"]):
            embed = discord.Embed(title="Message Edited", description="In " + before.channel.mention + " by " + before.author.mention, colour=discord.Colour(0x277b0))
            if not after.content:
                after.content = "\U0000200b"

            embed.set_author(name=before.author, icon_url= before.author.avatar_url)
            embed.set_footer(text="Generated by NecroBot", icon_url="https://cdn.discordapp.com/avatars/317619283377258497/a491c1fb5395e699148fcfed2ee755cf.jpg?size=128")
            embed.add_field(name="Before", value=before.content if len(before.content) < 1024 else before.content[1020:] + "...", inline=False)
            embed.add_field(name="After", value=after.content if len(after.content) < 1024 else after.content[1020:] + "...", inline=False)
            channel = self.bot.get_channel(self.bot.server_data[before.guild.id]["automod"])
            await channel.send(embed=embed)

    async def on_command(self, ctx):
        localtime = t.asctime(t.localtime(t.time()))
        try:
            can_run = str(await ctx.command.can_run(ctx))
        except:
            can_run = "False"

        if ctx.guild is None:
            guildname = "DMs"
            guildid = None
        else:
            guildname = ctx.guild.name
            guildid = ctx.guild.id

        await self.bot.query_executer("INSERT INTO necrobot.Logs (user_id, username, command, guild_id, guildname, message, time_used, can_run) VALUES($1,$2,$3,$4,$5,$6,$7,$8);", ctx.author.id, ctx.author.name, ctx.command.name, guildid, guildname, ctx.message.content, localtime, can_run)

    async def on_member_join(self, member):
        await self.bot.default_stats(member, member.guild)

        if member.bot:
            return

        if not self.bot.server_data[member.guild.id]["welcome-channel"] == "" and not self.bot.server_data[member.guild.id]["welcome"] == "":
            channel = self.bot.get_channel(self.bot.server_data[member.guild.id]["welcome-channel"])
            message = self.bot.server_data[member.guild.id]["welcome"]
            if member.id in self.bot.settings["blacklist"]:
                await channel.send(":eight_pointed_black_star: | **You are not welcome here, disturber of the peace**")
            else:
                await channel.send(message.format(member=member.mention, server=member.guild.name))

        if not self.bot.server_data[member.guild.id]["auto-role"] == "":
            role = discord.utils.get(member.guild.roles, id=self.bot.server_data[member.guild.id]["auto-role"])
            await member.add_roles(role)

            if self.bot.server_data[member.guild.id]["auto-role"] > 0:
                await asyncio.sleep(self.bot.server_data[member.guild.id]["auto-role-timer"])
                try:
                    await member.remove_roles(role)
                except:
                    pass

    async def on_member_remove(self, member):
        if self.bot.user_data[member.id]["perms"][member.guild.id] < 6:
            self.bot.user_data[member.id]["perms"][member.guild.id] = 0

        if self.bot.server_data[member.guild.id]["welcome-channel"] == "" or member.bot or self.bot.server_data[member.guild.id]["goodbye"] == "":
            return

        channel = self.bot.get_channel(self.bot.server_data[member.guild.id]["welcome-channel"])
        message = self.bot.server_data[member.guild.id]["goodbye"]

        if member.id in self.bot.settings["blacklist"]:
            await channel.send(":eight_pointed_black_star: | **...**")
        else:
            await channel.send(message.format(member=member.mention))

    async def on_reaction_add(self, reaction, user):
        if user.id in self.bot.settings["blacklist"]:
            return
            
        if isinstance(user, discord.User) and reaction.emoji == "\N{WASTEBASKET}" and reaction.message.author == self.bot.user:
            await reaction.message.delete()
            return            

        if reaction.emoji == "\N{CHERRY BLOSSOM}" and reaction.message.id in self.bot.events:
            if user.id in self.bot.events[reaction.message.id]["users"]:
                return

            self.bot.events[reaction.message.id]["users"].append(user.id)
            self.bot.user_data[user.id]["waifu"][reaction.message.guild.id]["flowers"] += self.bot.events[reaction.message.id]["amount"]


        if self.bot.server_data[user.guild.id]["starboard-channel"] == "":
            return

        if reaction.message.channel.id == self.bot.server_data[user.guild.id]["starboard-channel"]:
            return

        if reaction.message.id in self.bot.starred:
            return

        if reaction.emoji == "\N{WHITE MEDIUM STAR}" and reaction.count >= self.bot.server_data[user.guild.id]["starboard-limit"]:
            await self.bot._star_message(reaction.message)



def setup(bot):
    bot.add_cog(NecroEvents(bot))
