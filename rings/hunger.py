#!/usr/bin/python3.6
import discord
from discord.ext import commands
from discord.ext.commands.cooldowns import BucketType
import csv
import random
import asyncio
import json

class Hunger():
    """The all inclusive commands for friends looking to share a good old battle to the death time."""
    def __init__(self, bot):
        self.bot = bot
        with open("hunger_games_events.json", "r") as infile:
            self.events = json.load(infile)

    @commands.command()
    async def fight(self, ctx, *, tributes):
        """Takes in a list of tributes separated by `,` and simulates a hunger games based on Bransteele's Hunger Game Simulator. More than 
        one tribute needs to be supplied. Duplicate names will be supressed.

        {usage}

        __Example__
        `{pre}fight john , bob , emilia the trap` - starts a battle between tributes john, bob and emilia the trap"""
        tributes_list = list(set([x.strip() for x in tributes.split(",")]))
        if len(tributes_list) <2:
            await ctx.send(":negative_squared_cross_mark: | Please provide at least two names separated by `,`")
            return

        if len(tributes_list) > 32:
            await ctx.send(":negative_squared_cross_mark: | Please provide no more than 32 characters separated by `,`.")

        dead_list = []

        async def _phase_parser(event_name):
            idle_tributes = tributes_list
            idle_events = self.events[event_name].copy()
            embed = discord.Embed(title="__**Hunger Games Simulator**__", colour=discord.Colour(0x277b0), description=f"{' - '.join(tributes_list)}\nPress :arrow_forward: to proceed")
            embed.set_footer(text="Generated by NecroBot", icon_url="https://cdn.discordapp.com/avatars/317619283377258497/a491c1fb5395e699148fcfed2ee755cf.jpg?size=128")

            done_list = list()
            while len(idle_tributes) > 0 and len(tributes_list) > 1:
                tributes = list()
                event = random.choice([event for event in idle_events if event["tributes"] <= len(idle_tributes) and len(event["killed"]) < len(tributes_list)])
                tributes = random.sample(idle_tributes, event["tributes"])
                idle_tributes = [x for x in idle_tributes if x not in tributes]
                if len(event["killed"]) > 0:
                    idle_events.remove(event)
                    for killed in event["killed"]:
                        tribute = tributes[int(killed)-1]
                        del tributes_list[tributes_list.index(tribute)]
                        dead_list.append(tribute)

                format_dict = dict()
                for tribute in tributes:
                    format_dict["p"+str(tributes.index(tribute)+1)] = tribute
                try:
                    done_list.append(event["string"].format(**format_dict))
                except Exception as e:
                    channel = self.bot.get_channel(415169176693506048)
                    the_traceback = f"```py\n{traceback.format_exc()}\n```"
                    embed = discord.Embed(title="Fight Error", description=the_traceback, colour=discord.Colour(0x277b0))
                    embed.add_field(name='Error String', value=event["string"])
                    embed.add_field(name='Error Tribute Number', value=event["tributes"])
                    embed.add_field(name='Error Tribute Killed', value=event["killed"])
                    embed.add_field(name='Error Tributes', value=str(format_dict))
                    embed.set_footer(text="Generated by NecroBot", icon_url="https://cdn.discordapp.com/avatars/317619283377258497/a491c1fb5395e699148fcfed2ee755cf.jpg?size=128")
                    await channel.send(embed=embed)

                    if ctx.guild.id != 311630847969198082:
                        await ctx.send(":negative_squared_cross_mark: | Something unexpected went wrong, Necro's gonna get right to it. If you wish to know more on what went wrong you can join the support server: <https://discord.gg/Ape8bZt>")

                    return

            embed.add_field(name=event_name.title() + " " + str(day), value="\n".join(done_list))
            return embed            
        
        def check(reaction, user):
            return user == ctx.message.author and str(reaction.emoji) == "\N{BLACK RIGHT-POINTING TRIANGLE}" and msg.id == reaction.message.id

        day = 0
        embed = await _phase_parser("bloodbath")
        msg = await ctx.send(embed=embed)
        await msg.add_reaction("\N{BLACK RIGHT-POINTING TRIANGLE}")
        await self.bot.wait_for("reaction_add", check=check, timeout=600)

        async def _event_parser(event):
            embed = await _phase_parser(event)
            msg = await ctx.send(embed=embed)
            await msg.add_reaction("\N{BLACK RIGHT-POINTING TRIANGLE}")
            try:
                await self.bot.wait_for("reaction_add", check=check, timeout=600)
            except asyncio.TimeoutError as e:
                e.timer = 600
                await msg.clear_reactions()
                return self.bot.dispatch("command_error",ctx, e)

        while len(tributes_list) > 1:

            if day == 6:
                await _event_parser("feast")

            if len(tributes_list) >1: 
                await _event_parser("day")

            embed = discord.Embed(title="__**Dead Tributes**__", description="- " + "\n- ".join(dead_list) if len(dead_list) > 0 else "None")
            embed.set_footer(text="Generated by NecroBot", icon_url="https://cdn.discordapp.com/avatars/317619283377258497/a491c1fb5395e699148fcfed2ee755cf.jpg?size=128")
            msg = await ctx.send(embed=embed)
            await msg.add_reaction("\N{BLACK RIGHT-POINTING TRIANGLE}")
            try:
                await self.bot.wait_for("reaction_add", check=check, timeout=600)
            except asyncio.TimeoutError as e:
                    e.timer = 600
                    await msg.clear_reactions()
                    return self.bot.dispatch("command_error",ctx, e)
            del dead_list[:]

            if len(tributes_list) >1: 
                await _event_parser("night")

            day += 1

        await ctx.send(":tada:" + tributes_list[0] + " is the Winner! :tada:") 




def setup(bot):
    bot.add_cog(Hunger(bot))