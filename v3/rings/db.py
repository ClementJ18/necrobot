import discord
from discord.ext import commands

from rings.utils.config import dbpass

import asyncpg
import psycopg2
import traceback
from datetime import datetime

class DatabaseError(Exception):
    def __init__(self, message, query = None, args = tuple()):
        super().__init__(message)
        self.message = message
        self.query = query
        self.args = args
        
    def embed(self, bot):
        formatted = traceback.format_exception(type(self), self, self.__traceback__, chain=False)
        msg = f"```py\n{' '.join(formatted)}\n```"
        
        embed = discord.Embed(title="DB Error", description=msg, colour=discord.Colour(0x277b0))
        embed.add_field(name='Event', value=self.message, inline=False)
        embed.add_field(name="Query", value=self.query, inline=False)
        embed.add_field(name="Arguments", value=self.args, inline=False)
        embed.set_footer(text="Generated by Necrobot", icon_url=bot.user.avatar_url_as(format="png", size=128))
        
        return embed
        
    def __str__(self):
        return self.message

class Database(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
    def math_builder(self, arg, pos, update, add):
        if update is not None:
            return f"${pos}"
        
        if add is not None:
            return f"{arg} + ${pos}"
        
        raise DatabaseError("No operation mode specified for update")
        
    def guild_builder(self, guild, pos):
        if guild is None:
            return ""
        
        return f"AND guild_id = ${pos}"
    
    async def create_pool(self):
        self.bot.pool = await asyncpg.create_pool(database="postgres", user="postgres", password=dbpass)
        
    async def get_money(self, user_id):
        return await self.query_executer(
            "SELECT necroins FROM necrobot.Users WHERE user_id = $1", 
            user_id, fetchval=True
        )
        
    async def update_money(self, user_id, *, update=None, add=None):
        query = "UPDATE necrobot.Users SET necroins = {} WHERE user_id = $1 RETURNING necroins".format(
            self.math_builder('necroins', 2, update, add), 
        )
        
        return await self.query_executer(query, user_id, update if update is not None else add)
            
    async def get_permission(self, user_id, guild_id = None):
        if guild_id is None:
            query = "SELECT guild_id, level FROM necrobot.Permissions WHERE user_id = $1"
            return await self.query_executer(query, user_id)
        
        query = "SELECT level FROM necrobot.Permissions WHERE user_id = $1 AND guild_id = $2"
        return await self.query_executer(query, user_id, guild_id, fetchval=True)
        
    async def compare_user_permission(self, user_id, guild_id, compared_user):
        return await self.query_executer(
            """SELECT u1.level - u2.level FROM necrobot.Permissions u1, necrobot.Permissions u2
            WHERE u1.user_id = $1 AND u2.user_id = $2 
            AND u1.guild_id = $3 AND u2.guild_id = $3""",
            user_id, compared_user, guild_id, fetchval=True    
        )
        
    async def is_admin(self, user_id):
        perms = await self.get_permission(user_id)
        return any(x["level"] >= 6 for x in perms)
        
    async def update_permission(self, user_id, guild_id=None, *, update=None, add=None):        
        if guild_id is None:
            query = "UPDATE necrobot.Permissions SET level = {} WHERE user_id = $1 RETURNING level".format(
                self.math_builder('level', 2, update, add), 
            )
            return await self.query_executer(query, user_id, update if update is not None else add)
        
        query = "UPDATE necrobot.Permissions SET level = {} WHERE user_id = $1 AND guild_id = $2 RETURNING level".format(
            self.math_builder('level', 3, update, add), 
        )
        return await self.query_executer(query, user_id, guild_id, update if update is not None else add)
        
    async def insert_permission(self, user_id, guild_id, level):
        await self.query_executer(
            "INSERT INTO necrobot.Permissions VALUES ($1,$2,$3)",
            guild_id, user_id, level    
        )
        
    async def delete_permission(self, user_id, guild_id):
        await self.query_executer(
            "DELETE FROM necrobot.Permissions WHERE user_id = $1 AND guild_id = $2",
            user_id, guild_id    
        )
        
    async def get_daily_date(self, user_id):
        return await self.query_executer(
            "SELECT daily FROM necrobot.Users WHERE user_id = $1",
            user_id,
            fetchval = True
        )
        
    async def update_daily_date(self, user_id, date):
        date = datetime.today().date()
        
        return await self.query_executer(
            """UPDATE necrobot.Users as u1 SET u1.daily = $1 
            FROM necrobot.Users u2 
            WHERE user_id = $2 
            AND u1.user_id = u2.user_id 
            AND u1.daily IS DISTINCT FROM u2.daily
            RETURNING user_id""",
            date, user_id, fetchval = True    
        )
        
    async def get_title(self, user_id):
        return await self.query_executer(
            "SELECT title FROM necrobot.Users WHERE user_id = $1", 
            user_id, fetchval=True
        )
        
    async def update_title(self, user_id, title):
        return await self.query_executer(
            "UPDATE necrobot.Users SET title = $1 WHERE user_id = $2 RETURNING title",
            title, user_id, fetchval=True    
        )
        
    async def get_badges(self, user_id, *, badge = None, spot = None):
        if badge is None and spot is None:
            return await self.query_executer(
                """SELECT s.name, s.file_name, b.spot FROM necrobot.Badges b, necrobot.BadgeShop s
                WHERE b.user_id = $1 AND s.name = b.name""",
                user_id    
            )
        
        if badge is not None and spot is not None:
            return await self.query_executer(
                """SELECT s.name, s.file_name, b.spot FROM necrobot.Badges b, necrobot.BadgeShop s
                WHERE B.user_id = $1 AND b.spot = $3 AND s.name = $2 AND s.name = b.name""",
                user_id, badge, spot
            )
        
        if badge is None:
            return await self.query_executer(
                """SELECT s.name, s.file_name, b.spot FROM necrobot.Badges b, necrobot.BadgeShop s
                WHERE s.name = b.name AND s.name = $1 AND b.user_id = $2""",
                badge, user_id    
            )
        
        if spot is None:
            return await self.query_executer(
                """SELECT s.name, s.file_name, b.spot FROM necrobot.Badges b, necrobot.BadgeShop s
                WHERE s.name = b.name AND b.spot = $1 AND b.user_id = $2""",
                spot, user_id
            )
        
        raise DatabaseError("Something went wrong with badge selection")
    
    async def insert_badge(self, user_id, badge, spot = 0):
        await self.query_executer(
            "INSERT INTO necrobot.Badges VALUES ($1, $2, $3)",
            user_id, badge, spot
        )
        
    async def delete_badge(self, user_id, badge = None):
        if badge is None:
            await self.query_executer(
                "DELETE FROM necrobot.Badges WHERE user_id = $1",
                user_id
            )
        else:
            await self.query_executer(
                "DELETE FROM necrobot.Badges WHERE user_id = $1 AND name = $2",
                user_id, badge
            )
        
    async def update_badge_spot(self, user_id, badge, spot = 0):
        if spot != 0:
            await self.query_executer(
                "UPDATE necrobot.Badges SET spot = 0 WHERE user_id = $1 AND spot = $2",
                user_id, spot    
            )
        
        await self.query_executer(
            "UPDATE necrobot.Badges SET spot = $1 WHERE user_id = $2 AND name = $3",
            spot, user_id, badge    
        )
        
    async def get_badge_from_shop(self, *, special = None):
        if special is None:
            return await self.query_executer(
                "SELECT * FROM necrobot.BadgeShop"    
            )            
        
        return await self.query_executer(
            "SELECT * FROM necrobot.BadgeShop WHERE special = $1",
            special    
        )
        
    async def get_tutorial(self, user_id):
        tutorial = await self.query_executer(
            "SELECT tutorial FROM necrobot.Users WHERE user_id = $1",
            user_id, fetchval=True
        )
        
        return tutorial == "True"
        
    async def update_tutorial(self, user_id, value = True):
        await self.query_executer(
            "UPDATE necrobot.Users SET tutorial = $2 WHERE user_id = $1",
            user_id, str(value)
        )
        
    async def add_star(self, starred, message):
        await self.query_executer(
            "INSERT INTO necrobot.Starred VALUES ($1, $2, $3, $4);",
            starred.id, message.id, starred.guild.id, starred.author.id
        )
        
    async def update_prefix(self, guild_id, prefix):
        await self.bot.db.query_executer(
            "UPDATE necrobot.Guilds SET prefix = $1 WHERE guild_id = $2",
            prefix, guild_id    
        )
        self.bot.guild_data[guild_id]["prefix"] = prefix
        
    async def update_broadcast_channel(self, guild_id, channel_id = 0):        
        await self.query_executer(
            "UPDATE necrobot.Guilds SET broadcast_channel = $2 WHERE guild_id = $1;",
            guild_id, channel_id if channel_id else 0
        )
        self.bot.guild_data[guild_id]["broadcast-channel"] = channel_id
        
    async def update_broadcast_message(self, guild_id, message = ""):
        await self.query_executer(
            "UPDATE necrobot.Guilds SET broadcast_message = $1 WHERE guild_id = $2",
            message, guild_id    
        )
        self.bot.guild_data[guild_id]["broadcast"] = message
        
    async def update_broadcast_interval(self, guild_id, interval = 0):
        await self.query_executer(
            "UPDATE necrobot.Guilds SET broadcast_time = $1 WHERE guild_id = $2",
            interval, guild_id    
        )
        self.bot.guild_data[guild_id]["broadcast-time"] = interval
        
    async def update_starboard_channel(self, guild_id, channel_id = 0):
        await self.query_executer(
            "UPDATE necrobot.Guilds SET starboard_channel = $2 WHERE guild_id = $1;", 
            guild_id, channel_id if channel_id else 0
        )
        self.bot.guild_data[guild_id]["starboard-channel"] = channel_id
        
    async def update_starboard_limit(self, guild_id, limit = 1):
        await self.query_executer(
            "UPDATE necrobot.Guilds SET starboard_limit = $2 WHERE guild_id = $1",
            guild_id, limit    
        )
        self.bot.guild_data[guild_id]["starboard-limit"] = limit
        
    async def update_greeting_channel(self, guild_id, channel_id = 0):
        await self.query_executer(
            "UPDATE necrobot.Guilds SET welcome_channel = $2 WHERE guild_id = $1;", 
            guild_id, channel_id if channel_id else 0
        )
        self.bot.guild_data[guild_id]["welcome-channel"] = channel_id
        
    async def update_welcome_message(self, guild_id, message):
        await self.query_executer(
            "UPDATE necrobot.Guilds SET welcome_message = $1 WHERE guild_id = $2",
            message, guild_id    
        )
        self.bot.guild_data[guild_id]["welcome"] = message
        
    async def update_goodbye_message(self, guild_id, message):
        await self.query_executer(
            "UPDATE necrobot.Guilds SET goodbye_message = $1 WHERE guild_id = $2",
            message, guild_id    
        )
        
        self.bot.guild_data[guild_id]["goodbye"] = message
        
    async def update_automod_channel(self, guild_id, channel_id = 0):
        self.bot.guild_data[guild_id]["automod"] = channel_id
        await self.query_executer(
            "UPDATE necrobot.Guilds SET automod_channel = $2 WHERE guild_id = $1;",
            guild_id, channel_id if channel_id else 0
        )
        
    async def insert_automod_ignore(self, guild_id, *objects_id):
        if not objects_id:
            return
            
        await self.query_executer(
            "INSERT INTO necrobot.IgnoreAutomod VALUES($1, $2)",
            [(guild_id, x) for x in objects_id], many=True    
        )

        self.bot.guild_data[guild_id]["ignore-automod"].extend(objects_id)
        
    async def delete_automod_ignore(self, guild_id, *objects_id):
        if not objects_id:
            return
        
        await self.query_executer(
            "DELETE FROM necrobot.IgnoreAutomod WHERE guild_id = $1 AND id = any($2)",
            guild_id, objects_id    
        )
        
        self.bot.guild_data[guild_id]["ignore-automod"] = [x for x in self.bot.guild_data[guild_id]["ignore-automod"] if x not in objects_id]
        
    async def insert_command_ignore(self, guild_id, *objects_id):
        if not objects_id:
            return
        
        await self.query_executer(
            "INSERT INTO necrobot.IgnoreCommand VALUES($1, $2)",
            [(guild_id, x) for x in objects_id], many=True    
        )
        
        self.bot.guild_data[guild_id]["ignore-command"].extend(objects_id)
        
    async def delete_command_ignore(self, guild_id, *objects_id):
        if not objects_id:
            return

        await self.query_executer(
            "DELETE FROM necrobot.IgnoreCommand WHERE guild_id = $1 AND id = any($2)",
            guild_id, objects_id    
        )
        
        self.bot.guild_data[guild_id]["ignore-command"] = [x for x in self.bot.guild_data[guild_id]["ignore-command"] if x not in objects_id]
        
    async def update_mute_role(self, guild_id, role_id = 0):
        await self.query_executer(
            "UPDATE necrobot.Guilds SET mute = $2 WHERE guild_id = $1;", 
            guild_id, role_id
        )
        
        self.bot.guild_data[guild_id]["mute"] = role_id
        
    async def update_auto_role(self, guild_id, role_id = 0, timer = 0):
        await self.query_executer(
            "UPDATE necrobot.Guilds SET auto_role = $2, auto_role_timer = $3 WHERE guild_id = $1;", 
            guild_id, role_id, timer
        )
        
        self.bot.guild_data[guild_id]["auto-role"] = role_id
        self.bot.guild_data[guild_id]["auto-role-timer"] = timer
        
    async def insert_self_roles(self, guild_id, *roles_id):
        if not roles_id:
            return
            
        await self.bot.db.query_executer(
            "INSERT INTO necrobot.SelfRoles VALUES($1, $2)",
            *[(guild_id, role_id) for role_id in roles_id], many=True  
        )
        
        self.bot.guild_data[guild_id]["self-roles"].extend(
            [x for x in roles_id if x not in self.bot.guild_data[guild_id]["self-roles"]]
        )
        
    async def delete_self_roles(self, guild_id, *roles_id):
        if not roles_id:
            return
            
        await self.query_executer(
            "DELETE FROM necrobot.SelfRoles WHERE guild_id = $1 AND id = ANY($2);",
            guild_id, roles_id
        )
            
        self.bot.guild_data[guild_id]["self-roles"] = [
            x for x in self.bot.guild_data[guild_id]["self-roles"] if x not in roles_id
        ]
        
    async def insert_invite(self, guild_id, invite):
        await self.query_executer(
            "INSERT INTO necrobot.Invites VALUES($1, $2, $3, $4, $5)",
            invite.id, guild_id, invite.url, invite.uses, invite.inviter.id if invite.inviter else 000
        )
    
    async def delete_invite(self, guild_id, invite_id):
        await self.query_executer(
            "DELETE FROM necrobot.Invites WHERE id=$1",
            invite_id    
        )
        
    async def update_invites(self, guild):
        changed = None
        used_invite = None
        try:
            invites = sorted(await guild.invites(), key=lambda x: x.created_at)
        except discord.Forbidden:
            return

        for invite in invites:
            changed = await self.query_executer(
                """
                    INSERT INTO necrobot.Invites as inv VALUES($1, $2, $3, $4, $5)
                    ON CONFLICT (id)
                    DO UPDATE SET uses = $4 WHERE inv.id = $1 AND inv.uses < $4 RETURNING url""",
                invite.id, guild.id, invite.url, invite.uses, invite.inviter.id if invite.inviter else 000, fetchval=True
            )

            if changed and not used_invite:
                used_invite = invite
                break
                    
        return used_invite
        
    async def get_reminders(self, user_id = None):
        if user_id is None:
            return await self.query_executer(
                "SELECT * FROM necrobot.Reminders"    
            )
        
        return await self.query_executer(
            "SELECT * FROM necrobot.Reminders WHERE user_id = $1",
            user_id
        )
            
    async def insert_reminder(self, user_id, channel_id, reminder, timer, start_date):
        return await self.query_executer(
            """INSERT INTO necrobot.Reminders(user_id, channel_id, reminder, timer, start_date) 
            VALUES($1, $2, $3, $4, $5) RETURNING id""",
            user_id, channel_id, reminder, timer, start_date, fetchval = True    
        )
            
    async def delete_reminder(self, reminder_id):
        return await self.query_executer(
            "DELETE FROM necrobot.Reminders WHERE id = $1 RETURNING id",
            reminder_id, fetchval=True    
        )
        
    async def get_leaderboard(self, guild_id):
        return (await self.query_executer(
            "SELECT message, symbol FROM necrobot.Leaderboards WHERE guild_id = $1",
            guild_id
        ))[0]
        
    async def insert_leaderboard(self, guild_id):
        await self.query_executer(
            "INSERT INTO necrobot.Leaderboards VALUES ($1, '', 'points')",
            guild_id,     
        )
        
    async def update_leaderboard(self, guild_id, *, symbol = None, message = None):
        if not symbol is None:
            await self.query_executer(
                "UPDATE necrobot.Leaderboards SET symbol=$1 WHERE guild_id=$2", 
                symbol, guild_id
            )
        elif not message is None:
            await self.query_executer(
                "UPDATE necrobot.Leaderboards SET message=$1 WHERE guild_id=$2",
                message, guild_id    
            )    
        else:
            raise DatabaseError("No keyword selected")
               
    async def insert_leaderboard_member(self, guild_id, member_id):
        await self.query_executer(
            "INSERT INTO necrobot.LeaderboardPoints VALUES($1, $2, 0) ON CONFLICT (user_id, guild_id) DO NOTHING", 
            member_id, guild_id
        )
        
    async def update_leaderboard_member(self, guild_id, member_id, point):
        await self.query_executer(
            "UPDATE necrobot.LeaderboardPoints SET points = points + $1 WHERE user_id=$2 AND guild_id=$3", 
            point, member_id, guild_id
        )
        
    async def get_yt_rss(self, guild_id = None):
        if guild_id is not None:
            return await self.query_executer(
                "SELECT * FROM necrobot.Youtube WHERE guild_id = $1", 
                guild_id
            )
        
        return await self.query_executer("SELECT * FROM necrobot.Youtube")
            
    async def upsert_yt_rss(self, guild_id, channel_id, youtuber_id):
        await self.query_executer(
            """INSERT INTO necrobot.Youtube AS yt VALUES ($1, $2, $3, NOW(), '') 
            ON CONFLICT (guild_id,youtuber_id) 
            DO UPDATE SET channel_id = $2 WHERE yt.guild_id = $1 AND yt.youtuber_id = $3""",
            guild_id, channel_id, youtuber_id
        )
        
    async def update_yt_filter(self, guild_id, youtuber_id, text):
        await self.bot.db.query_executer(
            "UPDATE necrobot.Youtube SET filter = $3 WHERE guild_id = $1 and youtuber_id = $2", 
            guild_id, youtuber_id, text
        )
            
    async def update_yt_rss(self, guild_id = None):
        return await self.query_executer(
            "UPDATE necrobot.Youtube SET last_update = NOW() RETURNING last_update",
            fetchval=True
        )
        
    async def delete_rss_channel(self, guild_id, *, channel_id = None, youtuber_id = None):            
        if channel_id is not None:
            return await self.query_executer(
                "DELETE FROM necrobot.Youtube WHERE guild_id = $1 AND channel_id = $2", 
                guild_id, channel_id
            )
            
        if youtuber_id is not None:
            return await self.query_executer(
                "DELETE from necrobot.Youtube WHERE guild_id = $1 AND youtuber_id = $2",
                guild_id, youtuber_id    
            )
            
        return await self.query_executer(
            "DELETE FROM necrobot.Youtube WHERE guild_id = $1", 
            guild_id
        )

    async def query_executer(self, query, *args, fetchval = False, many = False, **kwargs):
        if self.bot.pool is None:
            await self.create_pool()
            
        conn = await self.bot.pool.acquire()
        try:
            if fetchval:
                result = await conn.fetchval(query, *args)
            elif many:
                result = await conn.executemany(query, *args)
            else:
                result = await conn.fetch(query, *args)
        except Exception as e:
            await self.bot.pool.release(conn)
            raise DatabaseError(str(e), query, args)
            
        await self.bot.pool.release(conn)
        return result

class SyncDatabase:
    def __init__(self):
        self.conn = psycopg2.connect(dbname="postgres", user="postgres", password=dbpass)
        self.cur = self.conn.cursor()
        
    def load_guilds(self):
        guilds = {}
        
        self.cur.execute("SELECT * FROM necrobot.Guilds;")
        for g in self.cur.fetchall():
            guilds[g[0]] = {
                "mute": g[1], 
                "automod":g[2], 
                "welcome-channel":g[3], 
                "welcome":g[4], 
                "goodbye":g[5], 
                "prefix":g[6],
                "broadcast-channel":g[7],
                "broadcast":g[8],
                "broadcast-time":g[9],
                "starboard-channel":g[10],
                "starboard-limit":g[11],
                "auto-role":g[12],
                "auto-role-timer":g[13],
                "ignore-command":[],
                "ignore-automod":[],
                "disabled":[],
                "self-roles": [],
            }
            
        self.cur.execute("SELECT guild_id, array_agg(command) FROM necrobot.Disabled GROUP BY guild_id;")
        for g in self.cur.fetchall():
            guilds[g[0]]["disabled"] = g[1]

        self.cur.execute("SELECT guild_id, array_agg(id) FROM necrobot.IgnoreAutomod GROUP BY guild_id;")
        for g in self.cur.fetchall():
            guilds[g[0]]["ignore-automod"] = g[1]

        self.cur.execute("SELECT guild_id, array_agg(id) FROM necrobot.IgnoreCommand GROUP BY guild_id;")
        for g in self.cur.fetchall():
            guilds[g[0]]["ignore-command"] = g[1]
            
        self.cur.execute("SELECT guild_id, array_agg(id) FROM necrobot.SelfRoles GROUP BY guild_id;")
        for g in self.cur.fetchall():
            guilds[g[0]]["self-roles"].append(g[1])
            
        return guilds
        
    def load_polls(self): 
          
        polls = {}
        self.cur.execute("SELECT * FROM necrobot.Polls")
        for u in self.cur.fetchall():
            polls[u[0]] = {'votes': u[1], 'voters':[]}
            
        self.cur.execute("SELECT message_id, array_agg(user_id) FROM necrobot.Votes GROUP BY message_id;")
        for u in self.cur.fetchall():
            polls[u[0]]["voters"] = u[1]
            
        return polls

def setup(bot):
    bot.add_cog(Database(bot))
