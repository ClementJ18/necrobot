
import discord
from discord.ext import commands

from rings.utils.db import db_gen
from rings.utils.config import token, dbpass
from rings.utils.help import NecroBotHelpFormatter

import re
import sys
import json
import random
import aiohttp
import time as t
import traceback

async def get_pre(bot, message):
    if not isinstance(message.channel, discord.DMChannel):
        guild_pre = bot.server_data[message.guild.id]["prefix"]
        if guild_pre != "":
            prefixes = [guild_pre, *bot.admin_prefixes]
            return commands.when_mentionned_or(*prefixes)(bot, message)

    return commands.when_mentionned_or(*bot.prefixes)(bot, message)

extensions = [
    "social",
    "wiki",
    "modding",
    "support",
    "utilities",
    "moderation",
    "profile",
    "server",
    "admin",
    "decisions",
    "economy",
    "events",
    "waifu",
    "words",
    "misc",
    "tags"
]

replyList = [
    "*yawn* What can I do fo... *yawn*... for you?", 
    "NecroBot do that, NecroBot do this, never NecroBot how are y... Oh, hey how can I help?",
    "I wonder how other bots are treated :thinking: Do they also put up with their owners' terrible coding habits?",
    "Second sight ordains it! I mean sure..."
    ]

class NecroBot(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix=get_pre, 
                         description="A bot for moderation and LOTR", 
                         formatter=NecroBotHelpFormatter(), 
                         case_insensitive=True, 
                         owner_id=241942232867799040, 
                         activity=discord.Game(name="Bot booting...", type=0))

        self.uptime_start = t.time()
        self.user_data, self.server_data, self.starred = db_gen()

        self.version = 2.3
        self.prefixes = ["n!", "N!", "n@", "N@"]
        self.admin_prefixes = ["n@", "N@"]
        self.new_commands = ["got"]
        self.statuses = ["n!help for help", "currently in {guild} guilds", "with {members} members"]

        self.session = aiohttp.ClientSession(loop=self.loop)
        
        self.cat_cache = []
        self.events = {}
        self.ready = False
        self.counter = 0

        @self.check
        def disabled_check(ctx):
            if isinstance(ctx.message.channel, discord.DMChannel):
                return True

            disabled = self.server_data[ctx.message.guild.id]["disabled"]

            if ctx.command.name in disabled and ctx.prefix not in self.admin_prefixes:
                raise commands.CheckFailure("This command has been disabled")

            return True
                
        self.add_check(disabled_check)

        @self.check
        def allowed_summon(ctx):
            if isinstance(ctx.message.channel, discord.DMChannel):
                return True
                
            roles = [role.id for role in ctx.author.roles]
            user_id = ctx.author.id
            guild_id = ctx.guild.id

            if self.user_data[user_id]["perms"][guild_id] >= 4 and ctx.prefix in self.admin_prefixes:
                return True

            if user_id in self.server_data[guild_id]["ignore-command"]:
                raise commands.CheckFailure("You are being ignored by the bot")

            if ctx.channel.id in self.server_data[guild_id]["ignore-command"]:
                raise commands.CheckFailure("Commands not allowed in the channel.")

            if any(x in roles for x in self.server_data[guild_id]["ignore-command"]):
                raise commands.CheckFailure("One of your roles isn't allowed to use commands.")

            return True

        self.add_check(allowed_summon)

        with open("rings/utils/data/settings.json", "rb") as infile:
            self.settings = json.load(infile)
        
        self.tutorial_e = discord.Embed.from_data({'footer': {'text': 'Generated by NecroBot', 'icon_url': 'https://cdn.discordapp.com/avatars/317619283377258497/a491c1fb5395e699148fcfed2ee755cf.jpg?size=128'}, 'fields': [{'inline': True, 'name': 'The Permission System', 'value': "The permissions system is the heart of NecroBot, it dictates what users can use which set of commands, however unlike other bots, it is not tied to a user's server permissions. This means that permissions must be manually assigned using the `perms` command. The server owner and users with administrator rights are automatically given level 5 and 4 accordingly but users needing permission level 3 and below will need manual assignment. When a user leaves a server their permission level is reset to 0, when a NecroBot Admin joins their level is automatically set to 6. All users with level 4 and above can use this commad but they can only set the permission level of other users to a number below their own."}, {'inline': True, 'name': 'Guild-Specific vs Discord-Wide Data', 'value': "Profile data on necrobot is separated into two categories: data which depends on which server you call the command in (Server-Specific) and data which remains the same regardless of the server (Discord-Wide). Such things are money, badges and exp are discord wide and therefore are harder to obtain. Things like waifus, warnings and permissions are user server-specific data and therefore they can often be modified by a server's authorities. Other-server speccific data are things like the automoderation list, the starboard channel, ect... The thing to keep in mind is that server specific data can be edited by server authorities while discord-wide data can only be edited at the discretion of NecroBot admins."}, {'inline': True, 'name': 'Settings', 'value': "The settings command is the command to customize how NecroBot behaves on your server. It includes a lot of subcommands which each cater to certain part so make sure to check out the help guide. In addition, several other commands allow you to decide how much NecroBot sees and does and how much users can use it. For example, the `disable` command allows to disable specific commands on the entire server, the `automod` command allows you to pick which channel/role/user is tracked by the bot automoderation and the `ignore` command allows you to pick who can and can't use the bot's features. Check out the Moderation and Server cogs for more info."}, {'inline': True, 'name': 'Feedback & Suggestions', 'value': "Necro's always looking to improve his bot and has therefore created several ways to communicate feedback. You can join the official support server and drop your suggestion there (do `n!about` to get an invite link). You can also use the `report` command, just use it anywhere and add your message after the command, it'll be sent directly to the server. Finally, you can also contact Necro#6714 with your ideas. All spam/nsfw will be deleted and offenders will be blocked from the bot."}], 'color': 161712, 'type': 'rich', 'description': "A helpful tutorial section for a more advanced overview on NecroBot's system. This should give users a more indepth overview on certain specifics features of it. It's a lot of information to take in at once, so feel free to read it bit by bit, and if you have any more questions you can join the official support server. Use `n!about` for an invite link.", 'title': 'NecroBot Tutorial'})

    async def on_ready(self):
        if not self.ready:
            await self.load_cache()
            self.ready = True
            print(self.server_data)
            print('------')
            print(f"Logged in as {self.user}")
        else:
            channel = self.get_channel(318465643420712962)
            await channel.send("**Bot Resumed**")

    async def on_error(self, event, *args, **kwargs): 
        channel = self.get_channel(415169176693506048)
        error_t, error, _ = sys.exc_info()

        the_traceback = f"```py\n{traceback.format_exc()}\n```"
        embed = discord.Embed(title="Error", description=the_traceback, colour=discord.Colour(0x277b0))
        embed.add_field(name='Event', value=event)
        embed.set_footer(text="Generated by NecroBot", icon_url="https://cdn.discordapp.com/avatars/317619283377258497/a491c1fb5395e699148fcfed2ee755cf.jpg?size=128")
        try:
            await channel.send(embed=embed)
        except discord.HTTPException:
            await channel.send(f'Bot: Ignoring exception in {event}')


    async def on_message(self, message):
        user_id = message.author.id
        channel_id = message.channel.id
        regex_match = r"(https://modding-union\.com/index\.php/topic).\d*"

        if message.author.bot or user_id in self.settings["blacklist"]:
            return

        if user_id not in self.user_data and message.guild:
            await self.default_stats(message.author, message.guild)

        url = re.search(regex_match, message.content)
        if url:
            await self._mu_auto_embed(url.group(0), message)

        if message.attachments:
            if message.attachments[0].filename.endswith(".bmp"):
                await self._bmp_converter(message)

        if not isinstance(message.channel, discord.DMChannel):
            self.user_data[user_id]["exp"] += random.randint(2,5)

            if message.content.startswith(self.user.mention):
                await message.channel.send(random.choice(replyList))
        else:
            if not self.user_data[user_id]["tutorial"]:
                self.user_data[user_id]["tutorial"] = True
                await message.channel.send(":information_source: | Did you know you can delete my messages in DMs by reacting to them with :wastebasket:? Give it a shot, react to this message with :wastebasket: .")
                await self.query_executer("UPDATE necrobot.Users SET tutorial = 'True' WHERE user_id = $1", user_id)

        await self.process_commands(message)


bot = NecroBot()

for extension in extensions:
    try:
        bot.load_extension(f"rings.{extension}")
    except Exception as e:
        print(f'Failed to load extension {extension}.', file=sys.stderr)
        traceback.print_exc()

bot.run(token)
